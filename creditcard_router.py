# -*- coding: utf-8 -*-
"""Creditcard_Router.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZOLoMP7nIVt4pDG-sA4cwZjvp0_p37sk
"""



!python --version

import pandas as pd

# Load the Excel file
file_path = '/content/drive/MyDrive/PSP_Jan_Feb_2019.xlsx'  # Provide the path to your Excel file
data = pd.read_excel(file_path)



from google.colab import drive
drive.mount('/content/drive')

# Define a list of all unique countries
all_countries = data['country'].unique()

# Display the list of countries for the user to select from
print("Select a country from the list:")
for index, country in enumerate(all_countries, start=1):
    print(f"{index}. {country}")

# Prompt the client to select a country
selected_country_index = int(input("Enter the index of the country: ")) - 1

# Check if the selected index is valid
if 0 <= selected_country_index < len(all_countries):
    selected_country = all_countries[selected_country_index]

    # Get all unique card types for the selected country
    all_card_types = data[data['country'] == selected_country]['card'].unique()

    print("Select a card type from the list:")
    for index, card_type in enumerate(all_card_types, start=1):
        print(f"{index}. {card_type.capitalize()}")

    # Prompt the client to select a card type
    selected_card_index = int(input("Enter the index of the card type: ")) - 1

    # Check if the selected card index is valid
    if 0 <= selected_card_index < len(all_card_types):
        selected_card_type = all_card_types[selected_card_index]

        try:
            # Prompt the client for user inputs
            user_amount = float(input("Enter the transaction amount: "))
            user_3d_secure = int(input("Enter 1 for enabled 3D secure, 0 for disabled: "))

            # Use the provided user inputs in the code for the selected country
            country_filtered_data = data[(data['country'] == selected_country) &
                                         (data['amount'] == user_amount) &
                                         (data['3D_secured'] == user_3d_secure) &
                                         (data['card'] == selected_card_type)]

            if country_filtered_data.empty:
                print("No data found for the given input.")
            else:
                # Calculate success probability for each PSP
                psp_success_probabilities = {}
                for psp in country_filtered_data['PSP'].unique():
                    psp_data = country_filtered_data[country_filtered_data['PSP'] == psp]
                    success_count = psp_data['success'].sum()
                    total_count = len(psp_data)
                    success_probability = success_count / total_count if total_count != 0 else 0
                    psp_success_probabilities[psp] = success_probability

                # Select the PSP with the highest success probability and minimum amount
                best_psp = min(psp_success_probabilities, key=lambda x: (psp_success_probabilities[x], country_filtered_data[country_filtered_data['PSP'] == x]['amount'].min()))

                # Print the suggested PSP for the selected country
                print(f"The suggested PSP for {selected_country} with the given criteria is \033[91m{best_psp}\033[0m and the credit card router will be processed to {best_psp}.")

        except ValueError:
            print("Invalid input. Please enter valid input for amount and 3D secure (0 or 1).")

    else:
        print("Invalid card type index selected.")

else:
    print("Invalid country index selected.")

'''In the provided code, the prediction is made based on the user-provided inputs for the transaction amount, 3D secure status, and card type. Here's how the code functions:

The script first displays a list of all unique countries available in the dataset, allowing the user to select a specific country for analysis.

After the user selects a country by providing the corresponding index, the script checks if the selected index is valid.

If the selected index is valid, the script proceeds to prompt the client for three inputs: the transaction amount, the 3D secure status (1 for enabled, 0 for disabled), and the card type.

The script then filters the dataset based on the selected country and the user-provided inputs for amount, 3D secure status, and card type.

If the filtered data is not empty, the script calculates the success probability for each Payment Service Provider (PSP) based on the filtered dataset. It counts the number of successful transactions for each PSP and calculates the ratio of successful transactions to the total number of transactions for each PSP, representing the success probability.

The script then selects the PSP with the highest success probability and the minimum transaction amount among the available options for the selected country and the provided user inputs.

Finally, the script prints the suggested PSP for the selected country based on the provided criteria.

This process allows the script to recommend the Payment Service Provider that offers the highest success probability and the minimum transaction amount for the specific country and the user's transaction preferences.'''













